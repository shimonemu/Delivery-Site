<!--
***********************************************************************************************
Microsoft.VisualStudio.TeamArchitect.LayerDesigner.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

This file defines the steps used to validate an architecture. It depends on the CoreBuild
target defined in the standard Microsoft .NET build targets.

Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Import build tasks -->
  <UsingTask TaskName="GraphCmd" AssemblyFile=".\Microsoft.VisualStudio.TeamArchitect.LayerDesigner.Build.dll"/>
  <UsingTask TaskName="LogGraphErrors" AssemblyFile=".\Microsoft.VisualStudio.TeamArchitect.LayerDesigner.Build.dll"/>
  <UsingTask TaskName="GenerateLoadDgql" AssemblyFile=".\Microsoft.VisualStudio.TeamArchitect.LayerDesigner.Build.dll"/>
  <UsingTask TaskName="GenerateValidateDgql" AssemblyFile=".\Microsoft.VisualStudio.TeamArchitect.LayerDesigner.Build.dll"/>
  <UsingTask TaskName="GenerateProjectKeyValuePairXml" AssemblyFile=".\Microsoft.VisualStudio.TeamArchitect.LayerDesigner.Build.dll"/>
  <UsingTask TaskName="GenerateInitialDgml" AssemblyFile=".\Microsoft.VisualStudio.TeamArchitect.LayerDesigner.Build.dll"/>

  <!-- Add 'Validate' as build action in VS IDE -->
  <ItemGroup>
    <AvailableItemName Include="Validate" />
  </ItemGroup>

  <!-- Rebuild when this targets file changes -->
  <PropertyGroup>
    <MSBuildAllProjects>
      $(MSBuildAllProjects);
      $(MSBuildExtensionsPath)\Microsoft\VisualStudio\v$(VisualStudioVersion)\ArchitectureTools\Microsoft.VisualStudio.TeamArchitect.LayerDesigner.targets
    </MSBuildAllProjects>
  </PropertyGroup>

  <!-- Set defaults -->
  <PropertyGroup>
    <ValidateArchitecture_ReportResults Condition="'$(ValidateArchitecture_ReportResults)'==''">true</ValidateArchitecture_ReportResults>
    <GraphCmdEnvironment Condition="'$(ValidateArchitecture_GenerateDependencies)'=='true'">$(GraphCmdEnvironment);ValidateArchitecture_GenerateDependencies=true</GraphCmdEnvironment>
  </PropertyGroup>

  <!-- Determine temporary output dir -->
  <PropertyGroup>
    <IntermediateOutputPath Condition="'$(IntermediateOutputPath)'==''">obj\</IntermediateOutputPath>
    <ValidateArchitecture_TempDir>$(IntermediateOutputPath)</ValidateArchitecture_TempDir>
  </PropertyGroup>

  <!-- Determine results location -->
  <PropertyGroup>
    <ValidateArchitecture_ResultsPath Condition="'$(ValidateArchitecture_ResultsPath)'=='' and '$(TargetName)'!=''">$(OutDir)$(TargetName).Results.dgml</ValidateArchitecture_ResultsPath>
    <ValidateArchitecture_ResultsPath Condition="'$(ValidateArchitecture_ResultsPath)'==''">$(OutDir)$(MSBuildProjectName).Results.dgml</ValidateArchitecture_ResultsPath>
  </PropertyGroup>

  <!-- Determine GraphCmd location -->
  <PropertyGroup>
    <GraphCmdPath Condition="'$(GraphCmdPath)'=='' and '$(VSINSTALLDIR)'!=''">$(VSINSTALLDIR)Common7\IDE</GraphCmdPath>
    <GraphCmdPath Condition="'$(GraphCmdPath)'=='' and '$(Registry:HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\14.0\Setup\VS@ProductDir)' != ''">$(Registry:HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\14.0\Setup\VS@ProductDir)Common7\IDE</GraphCmdPath>
    <GraphCmdPath Condition="'$(GraphCmdPath)'==''">$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\14.0\Architect', 'GraphCmdDir', '', RegistryView.Registry32))</GraphCmdPath>
  </PropertyGroup>

  <!-- Modeling Project: Run Validation after the build, but before running the application -->
  <PropertyGroup Condition="'$(Language)'=='UML'">
    <PrepareForRunDependsOn>$(PrepareForRunDependsOn);ValidateArchitecture</PrepareForRunDependsOn>
    <ValidateArchitectureDependsOn>$(ValidateArchitectureDependsOn);Compile</ValidateArchitectureDependsOn>
  </PropertyGroup>

  <!-- Validate Architecture -->
  <PropertyGroup>
    <ValidateArchitectureDependsOn>
      $(ValidateArchitectureDependsOn);
      ValidateArchitecture_Initialize;
      ValidateArchitecture_GenerateDgml;
      ValidateArchitecture_ValidateDgml;
      ValidateArchitecture_PublishResults;
      ValidateArchitecture_CleanUp;
    </ValidateArchitectureDependsOn>
  </PropertyGroup>
  <Target
    Name="ValidateArchitecture"
    DependsOnTargets="$(ValidateArchitectureDependsOn)"
    Condition="'$(ValidateArchitecture)'=='true' and '@(Validate)'!=''">

    <LogGraphErrors
      Input="$(ValidateArchitecture_ResultsPath)"
      Condition="'$(ValidateArchitecture_ReportResults)'=='true' and Exists('$(ValidateArchitecture_ResultsPath)')">
    </LogGraphErrors>

  </Target>

  <!-- Initialize the validation -->
  <Target
    Name="ValidateArchitecture_Initialize">

    <MakeDir Directories="$(ValidateArchitecture_TempDir)"/>
    <MakeDir Directories="$(ValidateArchitecture_ResultsDir)"/>
    <Delete Files="$(ValidateArchitecture_ResultsPath)" Condition="Exists('$(ValidateArchitecture_ResultsPath)')"/>

  </Target>


  <!-- An empty target that invokes all targets that produce dgml to be validated -->
  <Target
    Name="ValidateArchitecture_GenerateDgml"
    DependsOnTargets="$(ValidateArchitecture_GenerateDgmlDependsOn)">
  </Target>


  <!-- Generate dgml for custom dgml files -->
  <PropertyGroup>
    <ValidateArchitecture_GenerateDgmlDependsOn>
      $(ValidateArchitecture_GenerateDgmlDependsOn);
      ValidateArchitecture_GenerateDgmlForCustomDgml
    </ValidateArchitecture_GenerateDgmlDependsOn>
  </PropertyGroup>
  <Target
    Name="ValidateArchitecture_GenerateDgmlForCustomDgml">

    <ItemGroup>
      <ValidateArchitecture_CustomDgml    Include="%(Validate.FullPath)" Condition="'%(Validate.Extension)'=='.dgml'"/>
      <ValidateArchitecture_GeneratedDgml Include="%(Validate.FullPath)" Condition="'%(Validate.Extension)'=='.dgml'"/>
    </ItemGroup>

  </Target>


  <!-- Generate dgml for layers -->
  <PropertyGroup>
    <ValidateArchitecture_GenerateDgmlDependsOn>
      $(ValidateArchitecture_GenerateDgmlDependsOn);
      ValidateArchitecture_GenerateDgmlForLayers
    </ValidateArchitecture_GenerateDgmlDependsOn>
  </PropertyGroup>
  <Target
      Name="ValidateArchitecture_GenerateDgmlForLayers"
      DependsOnTargets="ValidateArchitecture_GetLayers"
      Inputs="@(ValidateArchitecture_Layers);@(ValidateArchitecture_Layers->'%(FullPath).suppressions')"
      Outputs="@(ValidateArchitecture_Layers -> '$(ValidateArchitecture_TempDir)%(Filename)%(Extension).dgml')">

    <GenerateLoadDgql
      Inputs="%(ValidateArchitecture_Layers.FullPath)"
      Output="$(ValidateArchitecture_TempDir)%(ValidateArchitecture_Layers.Filename)%(ValidateArchitecture_Layers.Extension).dgql">
    </GenerateLoadDgql>
    <ItemGroup>
      <FileWrites Include="$(ValidateArchitecture_TempDir)%(ValidateArchitecture_Layers.Filename)%(ValidateArchitecture_Layers.Extension).dgql" />
    </ItemGroup>

    <GraphCmd
      Queries="$(ValidateArchitecture_TempDir)%(ValidateArchitecture_Layers.Filename)%(ValidateArchitecture_Layers.Extension).dgql"
      Output="$(ValidateArchitecture_TempDir)%(ValidateArchitecture_Layers.Filename)%(ValidateArchitecture_Layers.Extension).dgml"
      OutputFormat="SimplifiedDgml"
      ToolPath="$(GraphCmdPath)"
      EnvironmentVariables="$(GraphCmdEnvironment)">
      <Output TaskParameter="Output" ItemName="ValidateArchitecture_GeneratedDgml"/>
    </GraphCmd>
    <ItemGroup>
      <FileWrites Include="$(ValidateArchitecture_TempDir)%(ValidateArchitecture_Layers.Filename)%(ValidateArchitecture_Layers.Extension).dgml" />
    </ItemGroup>

  </Target>
  <Target Name="ValidateArchitecture_GetLayers">
    <ItemGroup>
      <ValidateArchitecture_Layers Include="%(Validate.FullPath)" Condition="'%(Validate.Extension)'=='.layerdiagram'" />
    </ItemGroup>
  </Target>

  <!-- Generate initial dgml containing all input assemblies -->
  <Target 
    Name="GenerateInitialDgml"
    DependsOnTargets="ValidateArchitecture_GetReferences;ValidateArchitecture_GetBinaries">
    
    <GenerateInitialDgml
      Projects="@(_MSBuildProjectReferenceExistent)"
      ReferencedBinaries="@(ValidateArchitecture_References)"
      ValidateArchitectureBinaries="@(ValidateArchitecture_Binaries)"
      ValidateArchitectureLayers="@(ValidateArchitecture_GeneratedDgml)"
      BuildInParallel="$(BuildInParallel)"
      ContinueOnError="!$(BuildingProject)"
      Output="$(ValidateArchitecture_TempDir)Initial.dgml">
    </GenerateInitialDgml>
    <ItemGroup>
      <FileWrites Include="$(ValidateArchitecture_TempDir)Initial.dgml" />
      <FileWrites Include="$(ValidateArchitecture_TempDir)Initial.dgml.back" />
    </ItemGroup>
  </Target>

  <!-- Generate dgml for binaries -->
  <PropertyGroup>
    <ValidateArchitecture_GenerateDgmlDependsOn>
      $(ValidateArchitecture_GenerateDgmlDependsOn);
      ValidateArchitecture_GenerateDgmlForBinaries
    </ValidateArchitecture_GenerateDgmlDependsOn>
  </PropertyGroup>
  <Target
    Name="ValidateArchitecture_GenerateDgmlForBinaries"
    DependsOnTargets="GenerateInitialDgml"
    Inputs="@(ValidateArchitecture_Binaries);$(ValidateArchitecture_TempDir)Initial.dgml"
    Outputs="@(ValidateArchitecture_Binaries -> '$(ValidateArchitecture_TempDir)%(Filename)%(Extension).dgml')" >

    <GenerateLoadDgql
      Inputs="%(ValidateArchitecture_Binaries.FullPath)"
      Output="$(ValidateArchitecture_TempDir)%(ValidateArchitecture_Binaries.Filename)%(ValidateArchitecture_Binaries.Extension).dgql">
    </GenerateLoadDgql>
    <ItemGroup>
      <FileWrites Include="$(ValidateArchitecture_TempDir)%(ValidateArchitecture_Binaries.Filename)%(ValidateArchitecture_Binaries.Extension).dgql" />
    </ItemGroup>

    <GraphCmd
      Queries="$(ValidateArchitecture_TempDir)%(ValidateArchitecture_Binaries.Filename)%(ValidateArchitecture_Binaries.Extension).dgql"
      InitialDgml="$(ValidateArchitecture_TempDir)Initial.dgml"
      Binary="%(ValidateArchitecture_Binaries.FullPath)"
      Output="$(ValidateArchitecture_TempDir)%(ValidateArchitecture_Binaries.Filename)%(ValidateArchitecture_Binaries.Extension).dgml"
      OutputFormat="SimplifiedDgml"
      ToolPath="$(GraphCmdPath)"
      EnvironmentVariables="$(GraphCmdEnvironment)">
      <Output TaskParameter="Output" ItemName="ValidateArchitecture_GeneratedDgml"/>
    </GraphCmd>
    <ItemGroup>
      <FileWrites Include="$(ValidateArchitecture_TempDir)%(ValidateArchitecture_Binaries.Filename)%(ValidateArchitecture_Binaries.Extension).dgml" />
    </ItemGroup>

  </Target>
  <Target Name="ValidateArchitecture_GetBinaries">
    <ItemGroup>
      <ValidateArchitecture_Binaries Include="%(Validate.FullPath)" Condition="'%(Validate.Extension)'=='.dll' Or '%(Validate.Extension)'=='.exe'"/>
    </ItemGroup>
  </Target>

  <!--Generate dgml for references-->
  <PropertyGroup>
    <ValidateArchitecture_GenerateDgmlDependsOn>
      $(ValidateArchitecture_GenerateDgmlDependsOn);
      ValidateArchitecture_GenerateDgmlForReferences
    </ValidateArchitecture_GenerateDgmlDependsOn>
  </PropertyGroup>

  <Target
    Name="ValidateArchitecture_GenerateDgmlForReferences"
    DependsOnTargets="GenerateInitialDgml"
    Inputs="@(ValidateArchitecture_References->'%(Identity)');@(ValidateArchitecture_Binaries);$(ValidateArchitecture_TempDir)Initial.dgml"
    Outputs="@(ValidateArchitecture_References -> '$(ValidateArchitecture_TempDir)%(Filename)%(Extension).dgml')"
    Condition="'@(Validate)'!=''">

    <GenerateLoadDgql
      Inputs="%(ValidateArchitecture_References.FullPath)"
      Output="$(ValidateArchitecture_TempDir)%(ValidateArchitecture_References.Filename)%(ValidateArchitecture_References.Extension).dgql">
    </GenerateLoadDgql>
    <ItemGroup>
      <FileWrites Include="$(ValidateArchitecture_TempDir)%(ValidateArchitecture_References.Filename)%(ValidateArchitecture_References.Extension).dgql" />
    </ItemGroup>

    <GraphCmd
      Queries="$(ValidateArchitecture_TempDir)%(ValidateArchitecture_References.Filename)%(ValidateArchitecture_References.Extension).dgql"
      InitialDgml="$(ValidateArchitecture_TempDir)Initial.dgml"
      Binary="%(ValidateArchitecture_References.FullPath)"
      Output="$(ValidateArchitecture_TempDir)%(ValidateArchitecture_References.Filename)%(ValidateArchitecture_References.Extension).dgml"
      OutputFormat="SimplifiedDgml"
      ToolPath="$(GraphCmdPath)"
      EnvironmentVariables="$(GraphCmdEnvironment)">
      <Output TaskParameter="Output" ItemName="ValidateArchitecture_GeneratedDgml"/>
    </GraphCmd>
    <ItemGroup>
      <FileWrites Include="$(ValidateArchitecture_TempDir)%(ValidateArchitecture_References.Filename)%(ValidateArchitecture_References.Extension).dgml" />
    </ItemGroup>

  </Target>
  <Target
    Name="ValidateArchitecture_GetReferences"
    DependsOnTargets="ResolveReferences;ResolveNativeReferences" >
    <ItemGroup>
      <ValidateArchitecture_References Include="%(ReferencePath.FullPath)" />
    </ItemGroup>
  </Target>

  <Target
    Name="ResolveNativeReferences"
    DependsOnTargets="AssignProjectConfiguration;_SplitProjectReferencesByFileExistence"
    Returns="@(_ResolvedNativeProjectReferencePaths);@(_ResolvedProjectReferencePaths)">

    <MSBuild
      Projects="@(_MSBuildProjectReferenceExistent)"
      Targets="%(_MSBuildProjectReferenceExistent.Targets);GetNativeTargetPath"
      BuildInParallel="$(BuildInParallel)"
      Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform)"
      Condition="'%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceExistent)' != '' and '%(_MSBuildProjectReferenceExistent.Extension)' == '.vcxproj' "
      ContinueOnError="!$(BuildingProject)"
      RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">

      <Output TaskParameter="TargetOutputs" ItemName="_ResolvedProjectReferencePaths" Condition="'%(_MSBuildProjectReferenceExistent.ReferenceOutputAssembly)'=='true'"/>
      <Output TaskParameter="TargetOutputs" ItemName="%(_MSBuildProjectReferenceExistent.OutputItemType)" Condition="'%(_MSBuildProjectReferenceExistent.OutputItemType)' != ''"/>

    </MSBuild>

  </Target>

  <!-- Validate the generated dgml files -->
  <Target
    Name="ValidateArchitecture_ValidateDgml"
    DependsOnTargets="ValidateArchitecture_GenerateDgml"
    Inputs="@(ValidateArchitecture_GeneratedDgml);$(MSBuildProjectFile)"
    Outputs="$(ValidateArchitecture_TempDir)Validated.dgml"
    Condition="'@(ValidateArchitecture_Layers)'!='' or '@(ValidateArchitecture_CustomDgml)'!=''">

    <GenerateValidateDgql
      Output="$(ValidateArchitecture_TempDir)Validate.dgql">
    </GenerateValidateDgql>
    <ItemGroup>
      <FileWrites Include="$(ValidateArchitecture_TempDir)Validate.dgql" />
    </ItemGroup>

    <GraphCmd
      Inputs="@(ValidateArchitecture_GeneratedDgml)"
      Queries="$(ValidateArchitecture_TempDir)Validate.dgql"
      Output="$(ValidateArchitecture_TempDir)Validated.dgml"
      OutputFormat="SimplifiedDgml"
      ToolPath="$(GraphCmdPath)"
      EnvironmentVariables="$(GraphCmdEnvironment)">
      <Output TaskParameter="Output" PropertyName="ValidateArchitecture_TempResultsPath"/>
    </GraphCmd>
    <ItemGroup>
      <FileWrites Include="$(ValidateArchitecture_TempDir)Validated.dgml" />
    </ItemGroup>

  </Target>

  <!-- Publish the validation results -->
  <Target
    Name="ValidateArchitecture_PublishResults"
    Inputs="$(ValidateArchitecture_TempResultsPath)"
    Outputs="$(ValidateArchitecture_ResultsPath)"
    Condition="Exists('$(ValidateArchitecture_TempResultsPath)')">

    <Copy
      SourceFiles="$(ValidateArchitecture_TempResultsPath)"
      DestinationFiles="$(ValidateArchitecture_ResultsPath)"
      SkipUnchangedFiles="true"
      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
      Retries="$(CopyRetryCount)"
      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)">
    </Copy>
    <ItemGroup>
      <FileWrites Include="$(ValidateArchitecture_ResultsPath)" />
    </ItemGroup>

  </Target>

  <!-- Cleanup Temp files -->
  <Target Name="ValidateArchitecture_CleanUp">
    <!-- Attempt to delete any assemblies that were copied before being analysed;
         don't display errors about files that could not be deleted. -->
    <Exec Command="RmDir /S /Q $(temp)\LmrProviderTempAssemblyFolder 2&gt;nul" />
  </Target>
  
</Project>
